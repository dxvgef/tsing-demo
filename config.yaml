# 服务
service:
  # 监听地址，留空表示监听0.0.0.0
  ip: ""
  # 监听端口
  port: 3000
  # 读取超时(秒)
  readTimeout: 10
  # 头信息读取超时（秒）
  readHeaderTimeout: 10
  # 响应超时(秒)
  writeTimeout: 10
  # 空闲超时(秒)
  idleTimeout: 10
  # 退出等待超时时间（秒）
  quitWaitTimeout: 5
  # 调试模式，会将详细的错误信息输出给客户端
  debug: true
  # 自动恢复panic
  recover: true
  # 记录事件来源信息(影响性能)
  eventSource: true
  # 记录跟踪信息(影响性能)
  eventTrace: true
  # 记录处理器返回的error事件
  eventHandlerError: true
  # 记录404错误
  eventNotFound: true
  # 记录405错误
  eventMethodNotAllowed: true
  # 事件中使用短路径
  eventShortPath: true
  # 自动处理HTTP OPTIONS方法请求(响应200状态码)
  handleOPTIONS: true

# 日志记录器
logger:
  # 记录级别，支持以下值，留空则禁用logger
  # empty   不显示级别
  # debug
  # info
  # warn
  # error
  level: "debug"
  # 日志文件的路径，如果留空则不写文件
  filePath: ""
  # 日志文件的权限，例如0755|0700|0600
  fileMode: 0600
  # 日志输出编码，支持json,console
  encode: "console"
  # 时间格式，支持以下值
  # y 年
  # m 月
  # d 日
  # h 时
  # i 分
  # s 秒
  # timestamp unix时间戳
  timeFormat: "y-m-d h:i:s"

# snowflake算法参数
snowflake:
  # epoch值
  epoch: 0
  # 节点值
  node: 0

# 数据库
database:
  # 地址
  addr: "127.0.0.1:5432"
  # 账号
  user: "postgres"
  # 密码
  password: "123456"
  # 库名
  name: "demo"
  # 记录SQL语句
  stmtLog: true
  # 连接超时(秒)
  dialTimeout: 5
  # 读超时(秒)
  readTimeout: 10
  # 写超时(秒)
  writeTimeout: 10
  # 连接池大小
  poolSize: 200

session:
  # sessionid的值加密密钥，密钥的长度16,24,32对应AES-128,AES-192,AES-256算
  key: "0123456789012345"
  # sessionid的cookie键名
  cookieName: "sessionid"
  # HTTP Only
  httpOnly: false
  # 启用HTTPS
  secure: false
  # 最大生命周期(分)
  maxAge: 60
  # 空闲超时(分)
  idleTime: 40
  # redis地址:端口
  redisAddr: "127.0.0.1:6379"
  # redis的库序号
  redisDB: 0
  # redis的键名前缀
  redisKeyPrefix: "sess_"

etcd:
  # 服务端点
  endpoints: ["http://127.0.0.1:2379"]
  # 头信息超时时间(秒)
  headerTimeoutPerRequest: 10
  # etcd 账号
  username: ""
  # etcd 密码
  password: ""
  # 键的前缀
  keyPrefix: "/"
